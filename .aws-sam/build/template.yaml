AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-app

  Sample AWS SAM Template

  '
Globals:
  Function:
    Timeout: 3
Parameters:
  PREFIX:
    Type: String
    Default: SAM
  EMAIL:
    Type: String
    Default: example@mail.io
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${PREFIX}UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AliasAttributes:
      - email
  CognitoUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      Username: admin
      UserAttributes:
      - Name: email
        Value:
          Fn::Sub: ${EMAIL}
  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${PREFIX}AppClient
      ExplicitAuthFlows:
      - ALLOW_CUSTOM_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      UserPoolId:
        Ref: CognitoUserPool
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: userid
        AttributeType: S
      KeySchema:
      - AttributeName: userid
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PREFIX}IamRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ApiEndpoint:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Fn::Sub: ${PREFIX}ApiEndpoint
      Cors: '''*'''
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - CognitoUserPool
              - Arn
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${PREFIX}helloWorld
      CodeUri: HelloWorldFunction
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
        - IamRole
        - Arn
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiEndpoint
            Path: /hello
            Method: get
Outputs:
  RestApi:
    Description: 'API endpoint URLs for Prod stage:'
    Value:
      Fn::Sub: https://${ApiEndpoint}.execute-api.${AWS::Region}.amazonaws.com/${PREFIX}ApiEndpoint/hello/
